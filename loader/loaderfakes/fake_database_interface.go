// This file was generated by counterfeiter
package loaderfakes

import (
	"sync"

	"github.com/jinzhu/gorm"
)

type FakeDatabaseInterface struct {
	NewRecordStub        func(interface{}) bool
	newRecordMutex       sync.RWMutex
	newRecordArgsForCall []struct {
		arg1 interface{}
	}
	newRecordReturns struct {
		result1 bool
	}
	SaveStub        func(interface{}) *gorm.DB
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 interface{}
	}
	saveReturns struct {
		result1 *gorm.DB
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabaseInterface) NewRecord(arg1 interface{}) bool {
	fake.newRecordMutex.Lock()
	fake.newRecordArgsForCall = append(fake.newRecordArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("NewRecord", []interface{}{arg1})
	fake.newRecordMutex.Unlock()
	if fake.NewRecordStub != nil {
		return fake.NewRecordStub(arg1)
	} else {
		return fake.newRecordReturns.result1
	}
}

func (fake *FakeDatabaseInterface) NewRecordCallCount() int {
	fake.newRecordMutex.RLock()
	defer fake.newRecordMutex.RUnlock()
	return len(fake.newRecordArgsForCall)
}

func (fake *FakeDatabaseInterface) NewRecordArgsForCall(i int) interface{} {
	fake.newRecordMutex.RLock()
	defer fake.newRecordMutex.RUnlock()
	return fake.newRecordArgsForCall[i].arg1
}

func (fake *FakeDatabaseInterface) NewRecordReturns(result1 bool) {
	fake.NewRecordStub = nil
	fake.newRecordReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDatabaseInterface) Save(arg1 interface{}) *gorm.DB {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Save", []interface{}{arg1})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(arg1)
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeDatabaseInterface) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeDatabaseInterface) SaveArgsForCall(i int) interface{} {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].arg1
}

func (fake *FakeDatabaseInterface) SaveReturns(result1 *gorm.DB) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeDatabaseInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newRecordMutex.RLock()
	defer fake.newRecordMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDatabaseInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
