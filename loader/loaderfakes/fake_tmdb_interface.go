// This file was generated by counterfeiter
package loaderfakes

import (
	"sync"

	"github.com/ryanbradynd05/go-tmdb"
)

type FakeTmdbInterface struct {
	SearchTvStub        func(name string, options map[string]string) (*tmdb.TvSearchResults, error)
	searchTvMutex       sync.RWMutex
	searchTvArgsForCall []struct {
		name    string
		options map[string]string
	}
	searchTvReturns struct {
		result1 *tmdb.TvSearchResults
		result2 error
	}
	GetTvInfoStub        func(showid int, options map[string]string) (*tmdb.TV, error)
	getTvInfoMutex       sync.RWMutex
	getTvInfoArgsForCall []struct {
		showid  int
		options map[string]string
	}
	getTvInfoReturns struct {
		result1 *tmdb.TV
		result2 error
	}
	GetTvSeasonInfoStub        func(showid, seasonid int, options map[string]string) (*tmdb.TvSeason, error)
	getTvSeasonInfoMutex       sync.RWMutex
	getTvSeasonInfoArgsForCall []struct {
		showid   int
		seasonid int
		options  map[string]string
	}
	getTvSeasonInfoReturns struct {
		result1 *tmdb.TvSeason
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTmdbInterface) SearchTv(name string, options map[string]string) (*tmdb.TvSearchResults, error) {
	fake.searchTvMutex.Lock()
	fake.searchTvArgsForCall = append(fake.searchTvArgsForCall, struct {
		name    string
		options map[string]string
	}{name, options})
	fake.recordInvocation("SearchTv", []interface{}{name, options})
	fake.searchTvMutex.Unlock()
	if fake.SearchTvStub != nil {
		return fake.SearchTvStub(name, options)
	} else {
		return fake.searchTvReturns.result1, fake.searchTvReturns.result2
	}
}

func (fake *FakeTmdbInterface) SearchTvCallCount() int {
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	return len(fake.searchTvArgsForCall)
}

func (fake *FakeTmdbInterface) SearchTvArgsForCall(i int) (string, map[string]string) {
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	return fake.searchTvArgsForCall[i].name, fake.searchTvArgsForCall[i].options
}

func (fake *FakeTmdbInterface) SearchTvReturns(result1 *tmdb.TvSearchResults, result2 error) {
	fake.SearchTvStub = nil
	fake.searchTvReturns = struct {
		result1 *tmdb.TvSearchResults
		result2 error
	}{result1, result2}
}

func (fake *FakeTmdbInterface) GetTvInfo(showid int, options map[string]string) (*tmdb.TV, error) {
	fake.getTvInfoMutex.Lock()
	fake.getTvInfoArgsForCall = append(fake.getTvInfoArgsForCall, struct {
		showid  int
		options map[string]string
	}{showid, options})
	fake.recordInvocation("GetTvInfo", []interface{}{showid, options})
	fake.getTvInfoMutex.Unlock()
	if fake.GetTvInfoStub != nil {
		return fake.GetTvInfoStub(showid, options)
	} else {
		return fake.getTvInfoReturns.result1, fake.getTvInfoReturns.result2
	}
}

func (fake *FakeTmdbInterface) GetTvInfoCallCount() int {
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	return len(fake.getTvInfoArgsForCall)
}

func (fake *FakeTmdbInterface) GetTvInfoArgsForCall(i int) (int, map[string]string) {
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	return fake.getTvInfoArgsForCall[i].showid, fake.getTvInfoArgsForCall[i].options
}

func (fake *FakeTmdbInterface) GetTvInfoReturns(result1 *tmdb.TV, result2 error) {
	fake.GetTvInfoStub = nil
	fake.getTvInfoReturns = struct {
		result1 *tmdb.TV
		result2 error
	}{result1, result2}
}

func (fake *FakeTmdbInterface) GetTvSeasonInfo(showid int, seasonid int, options map[string]string) (*tmdb.TvSeason, error) {
	fake.getTvSeasonInfoMutex.Lock()
	fake.getTvSeasonInfoArgsForCall = append(fake.getTvSeasonInfoArgsForCall, struct {
		showid   int
		seasonid int
		options  map[string]string
	}{showid, seasonid, options})
	fake.recordInvocation("GetTvSeasonInfo", []interface{}{showid, seasonid, options})
	fake.getTvSeasonInfoMutex.Unlock()
	if fake.GetTvSeasonInfoStub != nil {
		return fake.GetTvSeasonInfoStub(showid, seasonid, options)
	} else {
		return fake.getTvSeasonInfoReturns.result1, fake.getTvSeasonInfoReturns.result2
	}
}

func (fake *FakeTmdbInterface) GetTvSeasonInfoCallCount() int {
	fake.getTvSeasonInfoMutex.RLock()
	defer fake.getTvSeasonInfoMutex.RUnlock()
	return len(fake.getTvSeasonInfoArgsForCall)
}

func (fake *FakeTmdbInterface) GetTvSeasonInfoArgsForCall(i int) (int, int, map[string]string) {
	fake.getTvSeasonInfoMutex.RLock()
	defer fake.getTvSeasonInfoMutex.RUnlock()
	return fake.getTvSeasonInfoArgsForCall[i].showid, fake.getTvSeasonInfoArgsForCall[i].seasonid, fake.getTvSeasonInfoArgsForCall[i].options
}

func (fake *FakeTmdbInterface) GetTvSeasonInfoReturns(result1 *tmdb.TvSeason, result2 error) {
	fake.GetTvSeasonInfoStub = nil
	fake.getTvSeasonInfoReturns = struct {
		result1 *tmdb.TvSeason
		result2 error
	}{result1, result2}
}

func (fake *FakeTmdbInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	fake.getTvSeasonInfoMutex.RLock()
	defer fake.getTvSeasonInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTmdbInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
