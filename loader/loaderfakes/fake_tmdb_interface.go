// This file was generated by counterfeiter
package loaderfakes

import (
	"sync"

	"github.com/ryanbradynd05/go-tmdb"
)

type FakeTmdbInterface struct {
	SearchTvStub        func(string, map[string]string) (*tmdb.TvSearchResults, error)
	searchTvMutex       sync.RWMutex
	searchTvArgsForCall []struct {
		arg1 string
		arg2 map[string]string
	}
	searchTvReturns struct {
		result1 *tmdb.TvSearchResults
		result2 error
	}
	GetTvInfoStub        func(id int, options map[string]string) (*tmdb.TV, error)
	getTvInfoMutex       sync.RWMutex
	getTvInfoArgsForCall []struct {
		id      int
		options map[string]string
	}
	getTvInfoReturns struct {
		result1 *tmdb.TV
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTmdbInterface) SearchTv(arg1 string, arg2 map[string]string) (*tmdb.TvSearchResults, error) {
	fake.searchTvMutex.Lock()
	fake.searchTvArgsForCall = append(fake.searchTvArgsForCall, struct {
		arg1 string
		arg2 map[string]string
	}{arg1, arg2})
	fake.recordInvocation("SearchTv", []interface{}{arg1, arg2})
	fake.searchTvMutex.Unlock()
	if fake.SearchTvStub != nil {
		return fake.SearchTvStub(arg1, arg2)
	} else {
		return fake.searchTvReturns.result1, fake.searchTvReturns.result2
	}
}

func (fake *FakeTmdbInterface) SearchTvCallCount() int {
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	return len(fake.searchTvArgsForCall)
}

func (fake *FakeTmdbInterface) SearchTvArgsForCall(i int) (string, map[string]string) {
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	return fake.searchTvArgsForCall[i].arg1, fake.searchTvArgsForCall[i].arg2
}

func (fake *FakeTmdbInterface) SearchTvReturns(result1 *tmdb.TvSearchResults, result2 error) {
	fake.SearchTvStub = nil
	fake.searchTvReturns = struct {
		result1 *tmdb.TvSearchResults
		result2 error
	}{result1, result2}
}

func (fake *FakeTmdbInterface) GetTvInfo(id int, options map[string]string) (*tmdb.TV, error) {
	fake.getTvInfoMutex.Lock()
	fake.getTvInfoArgsForCall = append(fake.getTvInfoArgsForCall, struct {
		id      int
		options map[string]string
	}{id, options})
	fake.recordInvocation("GetTvInfo", []interface{}{id, options})
	fake.getTvInfoMutex.Unlock()
	if fake.GetTvInfoStub != nil {
		return fake.GetTvInfoStub(id, options)
	} else {
		return fake.getTvInfoReturns.result1, fake.getTvInfoReturns.result2
	}
}

func (fake *FakeTmdbInterface) GetTvInfoCallCount() int {
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	return len(fake.getTvInfoArgsForCall)
}

func (fake *FakeTmdbInterface) GetTvInfoArgsForCall(i int) (int, map[string]string) {
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	return fake.getTvInfoArgsForCall[i].id, fake.getTvInfoArgsForCall[i].options
}

func (fake *FakeTmdbInterface) GetTvInfoReturns(result1 *tmdb.TV, result2 error) {
	fake.GetTvInfoStub = nil
	fake.getTvInfoReturns = struct {
		result1 *tmdb.TV
		result2 error
	}{result1, result2}
}

func (fake *FakeTmdbInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.searchTvMutex.RLock()
	defer fake.searchTvMutex.RUnlock()
	fake.getTvInfoMutex.RLock()
	defer fake.getTvInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTmdbInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
